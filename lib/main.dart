import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'main/script/firebase_options.dart'; // generated by the script
import 'package:go_router/go_router.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  String? initError;
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  } catch (e) {
    initError = e.toString();
  }
  runApp(App(initError: initError));
}

class App extends StatelessWidget {
  final String? initError;
  App({super.key, this.initError});

  final _router = GoRouter(
    initialLocation: '/',
    routes: [
      GoRoute(path: '/', builder: (_, __) => const HomeScreen()),
      GoRoute(path: '/firestore', builder: (_, __) => const FirestoreDemo()),
    ],
  );

  @override
  Widget build(BuildContext context) {
    if (initError != null) {
      return MaterialApp(
        debugShowCheckedModeBanner: false,
        home: Scaffold(
          body: Center(child: Text('Firebase init failed:\n$initError')),
        ),
      );
    }
    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      routerConfig: _router,
      theme: ThemeData(useMaterial3: true),
    );
  }
}

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Human Rhythms')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Firebase OK + Router OK'),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => context.go('/firestore'),
              child: const Text('Try Firestore Demo'),
            ),
          ],
        ),
      ),
    );
  }
}

/// Tiny Firestore demo (writes to 'demo_messages')
class FirestoreDemo extends StatefulWidget {
  const FirestoreDemo({super.key});
  @override
  State<FirestoreDemo> createState() => _FirestoreDemoState();
}

class _FirestoreDemoState extends State<FirestoreDemo> {
  final _controller = TextFieldController();
  final _messages = <String>[];

  TextEditingController TextFieldController() => TextEditingController();

  Future<void> _saveMessage() async {
    final text = _controller.text.trim();
    if (text.isEmpty) return;

    await FirebaseFirestore.instance.collection('demo_messages').add({
      'text': text,
      'timestamp': FieldValue.serverTimestamp(),
    });

    setState(() {
      _messages.add(text);
      _controller.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Firestore Demo')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: const InputDecoration(labelText: 'Enter a message'),
            ),
            const SizedBox(height: 12),
            ElevatedButton(
              onPressed: _saveMessage,
              child: const Text('Save to Firestore'),
            ),
            const Divider(height: 32),
            Expanded(
              child: ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (_, i) => ListTile(title: Text(_messages[i])),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
