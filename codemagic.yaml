workflows:
  android_mvp:
    name: Android MVP
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      vars:
        JAVA_TOOL_OPTIONS: "-Xmx3g"

    scripts:
      - name: Check repo
        script: |
          pwd
          ls -la
          test -f pubspec.yaml || (echo "ERROR: pubspec.yaml not found"; exit 1)

      - name: Flutter version / doctor
        script: |
          flutter --version
          flutter doctor -v || true

      - name: Get packages
        script: flutter pub get

      # FORCE a full Android *app* template so android/app/build.gradle exists
      - name: Ensure android/ios exist (force recreate as full app)
        script: |
          if [ ! -d "android/app" ]; then
            echo "No android/app folder -> generating full app template"
            rm -rf android
            flutter create --platforms=android --template=app .
          else
            echo "android/app already exists"
          fi

          if [ ! -d "ios" ]; then
            echo "No ios/ folder -> generating"
            flutter create --platforms=ios --template=app .
          else
            echo "ios/ already exists"
          fi

          echo "--- android folder tree ---"
          ls -R android || true

      - name: Add INTERNET permission
        script: |
          MANIFEST=android/app/src/main/AndroidManifest.xml
          if [ -f "$MANIFEST" ]; then
            if ! grep -q 'uses-permission android:name="android.permission.INTERNET"' "$MANIFEST"; then
              sed -i.bak 's|<application|<uses-permission android:name="android.permission.INTERNET" />\n    <application|' "$MANIFEST"
              echo "Injected INTERNET permission."
            else
              echo "INTERNET permission already present."
            fi
          else
            echo "WARN: $MANIFEST missing?"
            ls -R android || true
          fi

      - name: Provide google-services.json (from secret)
        script: |
          if [ -n "$GOOGLE_SERVICES_JSON_B64" ]; then
            echo "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > android/app/google-services.json
            echo "google-services.json written to android/app/"
            head -n 5 android/app/google-services.json || true
          else
            echo "No GOOGLE_SERVICES_JSON_B64 provided; skipping Firebase file."
          fi

      - name: Patch app/build.gradle (version bump + SDK; no .dev suffix)
        script: |
          APP=android/app/build.gradle
          if [ ! -f "$APP" ]; then
            echo "ERROR: $APP not found"
            echo "--- android tree just before patch ---"
            ls -R android || true
            exit 1
          fi

          # Bump versionCode/versionName so installs never downgrade
          VC=$(date +%s | cut -c1-10)
          if grep -q "versionCode" "$APP"; then
            sed -i.bak 's/versionCode[[:space:]]\+[0-9][0-9]*/versionCode '"$VC"'/g' "$APP"
          else
            echo "Inserting versionCode/versionName into defaultConfig..."
            awk '
              /defaultConfig[[:space:]]*{/ && !x {
                print; print "        versionCode '"$VC"'"; print "        versionName \"0.0.'"$VC"'\""; x=1; next
              }
              {print}
            ' "$APP" > /tmp/app.gradle && mv /tmp/app.gradle "$APP"
          fi
          sed -i.bak 's/versionName[[:space:]]\+"[^"]\+"/versionName "0.0.'"$VC"'"/g' "$APP" || true

          # Ensure min/target SDK sane
          sed -i.bak 's/minSdkVersion[[:space:]]\+[0-9][0-9]*/minSdkVersion 21/g' "$APP" || true
          sed -i.bak 's/targetSdkVersion[[:space:]]\+[0-9][0-9]*/targetSdkVersion 34/g' "$APP" || true

          echo "---- TOP of $APP ----"
          head -n 80 "$APP" || true

      - name: Build Debug APK (universal)
        script: |
          flutter clean
          flutter build apk --debug

    artifacts:
      - build/app/outputs/flutter-apk/*.apk

