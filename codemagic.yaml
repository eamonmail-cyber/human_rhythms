workflows:
  android_mvp:
    name: Android MVP
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      vars:
        JAVA_TOOL_OPTIONS: "-Xmx3g"

    scripts:
      - name: Check repo
        script: |
          pwd
          ls -la
          test -f pubspec.yaml || (echo "ERROR: pubspec.yaml not found"; exit 1)

      - name: Flutter version / doctor
        script: |
          flutter --version
          flutter doctor -v || true

      - name: Get packages
        script: flutter pub get

      - name: Ensure android/ios exist
        script: |
          if [ ! -d "android" ] || [ ! -d "ios" ]; then
            echo "android/ or ios/ missing -> flutter create ."
            flutter create .
          else
            echo "android/ and ios/ already present"
          fi

      - name: Add INTERNET permission (idempotent)
        script: |
          MANIFEST=android/app/src/main/AndroidManifest.xml
          if [ -f "$MANIFEST" ]; then
            if ! grep -q 'uses-permission android:name="android.permission.INTERNET"' "$MANIFEST"; then
              sed -i.bak 's|<application|<uses-permission android:name="android.permission.INTERNET" />\n    <application|' "$MANIFEST"
              echo "Injected INTERNET permission."
            else
              echo "INTERNET permission already present."
            fi
          else
            echo "WARN: $MANIFEST missing?"
          fi

      - name: Provide google-services.json (from secret)
        script: |
          if [ -n "$GOOGLE_SERVICES_JSON_B64" ]; then
            echo "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > android/app/google-services.json
            echo "google-services.json written to android/app/"
            head -n 3 android/app/google-services.json || true
          else
            echo "WARNING: GOOGLE_SERVICES_JSON_B64 not set (Firebase may not init)."
          fi

      - name: Patch app/build.gradle (version bump + SDK; no .dev suffix)
        script: |
          APP=android/app/build.gradle
          test -f "$APP" || { echo "Missing $APP"; exit 1; }

          # Bump versionCode/versionName so installs never downgrade
          VC=$(date +%s | cut -c1-10)
          if grep -q "versionCode" "$APP"; then
            sed -i.bak 's/versionCode[[:space:]]\+[0-9][0-9]*/versionCode '"$VC"'/g' "$APP"
          else
            awk '
              /defaultConfig[[:space:]]*{/ && !x {print; print "        versionCode '"$VC"'"; print "        versionName \"0.0.'"$VC"'\""; x=1; next}
              {print}
            ' "$APP" > /tmp/app.gradle && mv /tmp/app.gradle "$APP"
          fi
          sed -i.bak 's/versionName[[:space:]]\+"[^"]\+"/versionName "0.0.'"$VC"'"/g' "$APP"

          # Ensure min/target SDK sane
          sed -i.bak 's/minSdkVersion[[:space:]]\+[0-9][0-9]*/minSdkVersion 21/g' "$APP"
          sed -i.bak 's/targetSdkVersion[[:space:]]\+[0-9][0-9]*/targetSdkVersion 34/g' "$APP"

          echo "Top of app/build.gradle:"
          head -n 60 "$APP" || true

      - name: Build Debug APK
        script: |
          flutter clean
          flutter build apk --debug

      - name: Build Release APK
        script: |
          flutter build apk --release

      - name: Build App Bundle (Release)
        script: |
          flutter build appbundle --release

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/bundle/release/*.aab
